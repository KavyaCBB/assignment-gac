/*
 * Warehouse API
 *
 * Warehouse API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace IO.Swagger.Models
{
  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public partial class Product : IEquatable<Product>
  {
    /// <summary>
    /// Gets or Sets ID
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    [DataMember(Name = "ID")]
    public int? ID { get; set; }

    /// <summary>
    /// Gets or Sets Code
    /// </summary>
    [Required]
    [DataMember(Name = "Code")]
    public string Code { get; set; }

    /// <summary>
    /// Gets or Sets Name
    /// </summary>
    [Required]
    [DataMember(Name = "Name")]
    public string Name { get; set; }

    /// <summary>
    /// Gets or Sets Description
    /// </summary>
    [Required]
    [DataMember(Name = "Description")]
    public string Description { get; set; }

    /// <summary>
    /// Gets or Sets Dimension
    /// </summary>
    [Required]
    [DataMember(Name = "Dimension")]
    public string Dimension { get; set; }

    /// <summary>
    /// Gets or Sets VendorID
    /// </summary>
    [Required]
    [DataMember(Name = "VendorID")]
    public int? VendorID { get; set; }

    //[ForeignKey("Vendor")]
    //public int VendorProdRefId { get; set; }
    //public Vendor Vendor { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class Product {\n");
      sb.Append("  ID: ").Append(ID).Append("\n");
      sb.Append("  Code: ").Append(Code).Append("\n");
      sb.Append("  Name: ").Append(Name).Append("\n");
      sb.Append("  Description: ").Append(Description).Append("\n");
      sb.Append("  Dimension: ").Append(Dimension).Append("\n");
      sb.Append("  VendorID: ").Append(VendorID).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      return obj.GetType() == GetType() && Equals((Product)obj);
    }

    /// <summary>
    /// Returns true if Product instances are equal
    /// </summary>
    /// <param name="other">Instance of Product to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Product other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;

      return
          (
              ID == other.ID ||
              ID != null &&
              ID.Equals(other.ID)
          ) &&
          (
              Code == other.Code ||
              Code != null &&
              Code.Equals(other.Code)
          ) &&
          (
              Name == other.Name ||
              Name != null &&
              Name.Equals(other.Name)
          ) &&
          (
              Description == other.Description ||
              Description != null &&
              Description.Equals(other.Description)
          ) &&
          (
              Dimension == other.Dimension ||
              Dimension != null &&
              Dimension.Equals(other.Dimension)
          ) &&
          (
              VendorID == other.VendorID ||
              VendorID != null &&
              VendorID.Equals(other.VendorID)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        var hashCode = 41;
        // Suitable nullity checks etc, of course :)
        if (ID != null)
          hashCode = hashCode * 59 + ID.GetHashCode();
        if (Code != null)
          hashCode = hashCode * 59 + Code.GetHashCode();
        if (Name != null)
          hashCode = hashCode * 59 + Name.GetHashCode();
        if (Description != null)
          hashCode = hashCode * 59 + Description.GetHashCode();
        if (Dimension != null)
          hashCode = hashCode * 59 + Dimension.GetHashCode();
        if (VendorID != null)
          hashCode = hashCode * 59 + VendorID.GetHashCode();
        return hashCode;
      }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(Product left, Product right)
    {
      return Equals(left, right);
    }

    public static bool operator !=(Product left, Product right)
    {
      return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
  }
}
