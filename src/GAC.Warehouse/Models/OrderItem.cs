/*
 * Warehouse API
 *
 * Warehouse API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace IO.Swagger.Models
{
  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public partial class OrderItem : IEquatable<OrderItem>
  {
    /// <summary>
    /// Gets or Sets OrderItem ID
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    [DataMember(Name = "ID")]
    public int? ID { get; set; }

    /// <summary>
    /// 
    /// </summary>
    [DataMember(Name = "ProductID")]
    public int? ProductID { get; set; }

    /// <summary>
    /// Gets or Sets Quantity
    /// </summary>
    [Required]
    [DataMember(Name = "Quantity")]
    public int? Quantity { get; set; }

    /// <summary>
    /// 
    /// </summary>
    [Required]
    [DataMember(Name = "OrderID")]
    public int? OrderID { get; set; }

    //[ForeignKey("Order")]
    //public int OrderRefId { get; set; }
    //public Order Order { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class OrderItem {\n");
      sb.Append("  ProductID: ").Append(ProductID).Append("\n");
      sb.Append("  Quantity: ").Append(Quantity).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      return obj.GetType() == GetType() && Equals((OrderItem)obj);
    }

    /// <summary>
    /// Returns true if OrderItem instances are equal
    /// </summary>
    /// <param name="other">Instance of OrderItem to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OrderItem other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;

      return
          (
              ProductID == other.ProductID ||
              ProductID != null &&
              ProductID.Equals(other.ProductID)
          ) &&
          (
              Quantity == other.Quantity ||
              Quantity != null &&
              Quantity.Equals(other.Quantity)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        var hashCode = 41;
        // Suitable nullity checks etc, of course :)
        if (ProductID != null)
          hashCode = hashCode * 59 + ProductID.GetHashCode();
        if (Quantity != null)
          hashCode = hashCode * 59 + Quantity.GetHashCode();
        return hashCode;
      }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(OrderItem left, OrderItem right)
    {
      return Equals(left, right);
    }

    public static bool operator !=(OrderItem left, OrderItem right)
    {
      return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
  }
}
