/*
 * Warehouse API
 *
 * Warehouse API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SalesOrderRequest : IEquatable<SalesOrderRequest>
    { 
        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [Required]
        [DataMember(Name="CustomerID")]
        public int? CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets OrderItemRequestList
        /// </summary>
        [Required]
        [DataMember(Name="OrderItemRequestList")]
        public OrderItemRequestList OrderItemRequestList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesOrderRequest {\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  OrderItemRequestList: ").Append(OrderItemRequestList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SalesOrderRequest)obj);
        }

        /// <summary>
        /// Returns true if SalesOrderRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrderRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomerID == other.CustomerID ||
                    CustomerID != null &&
                    CustomerID.Equals(other.CustomerID)
                ) && 
                (
                    OrderItemRequestList == other.OrderItemRequestList ||
                    OrderItemRequestList != null &&
                    OrderItemRequestList.Equals(other.OrderItemRequestList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomerID != null)
                    hashCode = hashCode * 59 + CustomerID.GetHashCode();
                    if (OrderItemRequestList != null)
                    hashCode = hashCode * 59 + OrderItemRequestList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SalesOrderRequest left, SalesOrderRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SalesOrderRequest left, SalesOrderRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
