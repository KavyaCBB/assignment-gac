/*
 * Warehouse API
 *
 * Warehouse API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations.Schema;

namespace IO.Swagger.Models
{
  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public partial class Address : IEquatable<Address>
  {
    /// <summary>
    /// Gets or Sets ID
    /// </summary>
    [Key]
    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
    [DataMember(Name = "ID")]
    public int? ID { get; set; }

    /// <summary>
    /// Gets or Sets CustomerID
    /// </summary>
    [Required]
    [DataMember(Name = "VendorID")]
    public int? VendorID { get; set; }

    /// <summary>
    /// Gets or Sets Street
    /// </summary>
    [Required]
    [DataMember(Name = "Street")]
    public string Street { get; set; }

    /// <summary>
    /// Gets or Sets City
    /// </summary>
    [Required]
    [DataMember(Name = "City")]
    public string City { get; set; }

    /// <summary>
    /// Gets or Sets State
    /// </summary>
    [Required]
    [DataMember(Name = "State")]
    public string State { get; set; }

    /// <summary>
    /// Gets or Sets Country
    /// </summary>
    [Required]
    [DataMember(Name = "Country")]
    public string Country { get; set; }

    /// <summary>
    /// Gets or Sets ZipCode
    /// </summary>
    [Required]
    [DataMember(Name = "ZipCode")]
    public string ZipCode { get; set; }

    //[ForeignKey("Vendor")]
    //public int VendorRefId { get; set; }
    //public Vendor Vendor { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class Address {\n");
      sb.Append("  ID: ").Append(ID).Append("\n");
      sb.Append("  VendorID: ").Append(VendorID).Append("\n");
      sb.Append("  Street: ").Append(Street).Append("\n");
      sb.Append("  City: ").Append(City).Append("\n");
      sb.Append("  State: ").Append(State).Append("\n");
      sb.Append("  Country: ").Append(Country).Append("\n");
      sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      return obj.GetType() == GetType() && Equals((Address)obj);
    }

    /// <summary>
    /// Returns true if Address instances are equal
    /// </summary>
    /// <param name="other">Instance of Address to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Address other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;

      return
          (
              ID == other.ID ||
              ID != null &&
              ID.Equals(other.ID)
          ) &&
          (
              VendorID == other.VendorID ||
              VendorID != null &&
              VendorID.Equals(other.VendorID)
          ) &&
          (
              Street == other.Street ||
              Street != null &&
              Street.Equals(other.Street)
          ) &&
          (
              City == other.City ||
              City != null &&
              City.Equals(other.City)
          ) &&
          (
              State == other.State ||
              State != null &&
              State.Equals(other.State)
          ) &&
          (
              Country == other.Country ||
              Country != null &&
              Country.Equals(other.Country)
          ) &&
          (
              ZipCode == other.ZipCode ||
              ZipCode != null &&
              ZipCode.Equals(other.ZipCode)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        var hashCode = 41;
        // Suitable nullity checks etc, of course :)
        if (ID != null)
          hashCode = hashCode * 59 + ID.GetHashCode();
        if (VendorID != null)
          hashCode = hashCode * 59 + VendorID.GetHashCode();
        if (Street != null)
          hashCode = hashCode * 59 + Street.GetHashCode();
        if (City != null)
          hashCode = hashCode * 59 + City.GetHashCode();
        if (State != null)
          hashCode = hashCode * 59 + State.GetHashCode();
        if (Country != null)
          hashCode = hashCode * 59 + Country.GetHashCode();
        if (ZipCode != null)
          hashCode = hashCode * 59 + ZipCode.GetHashCode();
        return hashCode;
      }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(Address left, Address right)
    {
      return Equals(left, right);
    }

    public static bool operator !=(Address left, Address right)
    {
      return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
  }
}
