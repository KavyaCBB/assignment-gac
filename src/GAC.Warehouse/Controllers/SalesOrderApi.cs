/*
 * Warehouse API
 *
 * Warehouse API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Reflection;
using GAC.Warehouse.Repository;

namespace IO.Swagger.Controllers
{
  /// <summary>
  /// 
  /// </summary>
  [ApiController]
  public class SalesOrderApiController : ControllerBase
  {

    private readonly IDataRepository<Order> _orderRepository;
    private readonly IDataRepository<OrderItem> _orderItemRepository;

    public SalesOrderApiController(IDataRepository<Order> orderRepository, IDataRepository<OrderItem> orderItemRepository)
    {
      _orderRepository = orderRepository;
      _orderItemRepository=orderItemRepository;
    }
    /// <summary>
    /// Create SalesOrder
    /// </summary>
    /// <param name="body"></param>
    /// <response code="200">Operation succeeded</response>
    /// <response code="400">Bad request</response>
    [Authorize]
    [HttpPost]
    [Route("/api/SalesOrder/CreateSalesOrder")]
    [ValidateModelState]
    [SwaggerOperation("CreateSalesorder")]
    [SwaggerResponse(statusCode: 200, type: typeof(SalesOrderResponse), description: "Operation succeeded")]
    [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
    public virtual IActionResult CreateSalesorder([FromBody]SalesOrderRequest body)
    {
      ServiceResponse<SalesOrderResponse> serviceResponse = new ServiceResponse<SalesOrderResponse>();
      int? orderid=_orderRepository.Add(new Order(){CustomerID=body.CustomerID,OrderDate=DateTime.Now.ToString() });
      List<OrderItem> orderItems=new List<OrderItem>();
      foreach (var item in body.OrderItemRequestList.SalesOrders)
      {
                  orderItems.Add(new OrderItem() { OrderID=orderid,ProductID=item.ProductID,Quantity=item.Quantity}) ;
      }
      foreach (var item in orderItems)
      {
        int? orderItemid=_orderItemRepository.Add(item);
      }
      if (orderid>0)
      {
        SalesOrderResponse response = new SalesOrderResponse() { OrderID=orderid,Message="Saved Successfully." };
        serviceResponse.SetSuccess(response);
      }
      else
      {
        serviceResponse.SetError(MethodBase.GetCurrentMethod().Name, ServiceResponseStatus.Error, "", "", string.Empty);
      }
      return Ok(serviceResponse);
    }

    /// <summary>
    /// Get all orderitems for particular order
    /// </summary>
    /// <response code="200">Operation succeeded</response>
    /// <response code="400">Bad request</response>
    [Authorize]
    [HttpGet]
    [Route("/api/SalesOrder/GetSalesOrder")]
    [ValidateModelState]
    [SwaggerOperation("GetOrderitems")]
    [SwaggerResponse(statusCode: 200, type: typeof(OrderItemsResponse), description: "Operation succeeded")]
    [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Bad request")]
    public virtual IActionResult GetOrderitems()
    {
      ServiceResponse<OrderItemsResponse> serviceResponse = new ServiceResponse<OrderItemsResponse>();
      IEnumerable<OrderItem> orderItems = _orderItemRepository.GetAll();
      if (orderItems.ToList().Count >0)
      {

        OrderItemsResponse response = new OrderItemsResponse() { OrderItemList = new OrderItemList(){ SalesOrders=orderItems.ToList() }};
        serviceResponse.SetSuccess(response);
      }
      else
      {
        serviceResponse.SetError(MethodBase.GetCurrentMethod().Name, ServiceResponseStatus.Error, "", "", string.Empty);
      }
      return Ok(serviceResponse);
    }
  }
}
